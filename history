;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(dired-regexp-history slime-minibuffer-history common-lisp-hyperspec-history search-ring magit-push-refspecs-history buffer-name-history magit-git-command-history bookmark-history sly-minibuffer-history eww-prompt-history read-expression-history pdf-annot-color-history shell-command-history tmm--history org-capture--prompt-history org-read-date-history org--links-history org-tags-history org-refile-history xref--read-pattern-history regexp-history xref--read-identifier-history counsel-describe-symbol-history magit-revision-history yes-or-no-p-history ivy-history counsel-M-x-history swiper-history file-name-history ido-buffer-history ido-file-history query-replace-history minibuffer-history extended-command-history))
(setq dired-regexp-history '("elfeed"))
(setq buffer-name-history '(".elfeed" "index" "elfeed-goodies-readme.txt" "elfeed-org-readme.txt" "elfeed-protocol-readme.txt" "elfeed-web-readme.txt" "elf-mode-readme.txt" "elfeed-readme.txt" "*inferior-lisp*" "*slime-repl clisp*" "*inferior-lisp*" "*slime-repl clisp*" "*inferior-lisp*" "clisp" "*slime-repl clisp*" "*slime-compilation*" "digital-circuits-test.lisp" "magit-diff: .emacs.d" "settings.org" "*inferior-lisp*" "*slime-repl clisp*" "sicp.pdf" "pdf-tools-autoloads.el" "sicp.pdf" "magit.pdf" "pdf-tools-autoloads.el" "magit.pdf" ".saves-14728-SR5HMBA.local~" "#settings.org#" "magit: .emacs.d" "org"))
(setq bookmark-history '("defun" "defun"))
(setq eww-prompt-history '("https://github.com/skeeto/elfeed" "google.com" "https://google.com" "http://google.com"))
(setq read-expression-history '("(forward-sexp-function '*)"))
(setq shell-command-history '("slime" "brew"))
(setq tmm--history '("h==>Help" "y==>YASnippet" "E==>Eww" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File" "h==>Help" "y==>YASnippet" "E==>Eww" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File" "h==>Help" "y==>YASnippet" "E==>Eww" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File" "h==>Help" "y==>YASnippet" "E==>Eww" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq org-capture--prompt-history '(#("아빠 생일" 0 5 (ivy-index 0)) #("지우개, 북 슬라이더? 살것" 0 15 (ivy-index 0)) #("마우스 살것" 0 6 (ivy-index 0))))
(setq org-read-date-history '("   " "16:05P    " "   " "10:00    " "   " "13:00    " "11:00    " "15:00-18:00    " "18:00    " "  15:00    " "   16:00    " "15:00    " "13:00    " "15:00 4Fri    " "15:00 3    " "13:00    " "15:00    " "   "))
(setq org-tags-history '("@home" "@outside" "@computer" "@vehicle" "@outside" "@storehouse" "PROJECT" #("re" 0 2 (ivy-index 0)) "@outside" #("c" 0 1 (ivy-index 1)) "@outside" "PROJECT" "@computer" "@home" "@computer" "@home" "@storehouse" #("s" 0 1 (ivy-index 0)) "@home" "INBOX" "@home" #("BURNINGKAN" 0 10 (ivy-index 0))))
(setq org-refile-history '("Appointment (calendar.org)" "Projects (gtd.org)" "Tickler (tickler.org)" "Tasks (someday.org)" "Tuning (habit.org)" "Appointment (calendar.org)" "Tasks (gtd.org)" "Tickler (tickler.org)" "Projects (gtd.org)" "Appointment (calendar.org)" "Tasks (gtd.org)" "Appointment (calendar.org)" "Tasks (gtd.org)" "Tickler (tickler.org)" "Tasks (gtd.org)" "tasks (gtd.org)" "Camping (habit.org)" "tasks (gtd.org)" "tasks (someday.org)" "tasks (gtd.org)" "Tickler (tickler.org)" "tasks (gtd.org)" "tasks (someday.org)"))
(setq counsel-describe-symbol-history '(#("^user" 0 5 (ivy-index 5)) #("^savehis" 0 8 (ivy-index 9)) #("^lisp mode hook" 0 15 (ivy-index 1)) #("^lisp-mode-hook" 0 15 (ivy-index 0)) #("^" 0 1 (ivy-index 6051)) #("^org-todo-state" 0 15 (ivy-index 0)) #("^org-agenda-inc" 0 15 (ivy-index 1)) #("^org file tag" 0 13 (ivy-index 0)) #("^set-font" 0 9 (ivy-index 1)) #("^org deadl war" 0 14 (ivy-index 1)) #("^org-agenda-files" 0 17 (ivy-index 0)) #("^org-di" 0 7 (ivy-index 0)) #("^org-log-done" 0 13 (ivy-index 0)) #("^windmove-down" 0 14 (ivy-index 0)) #("^color-theme" 0 12 (ivy-index 7))))
(setq magit-revision-history '("origin/master" "0.0.1" "master" "origin/master" "0.0.1" "origin/master" "master" #("0.0.1" 0 5 (ivy-index 0)) "origin/master" "5dc1ed6" "origin/master" "origin/6ec88a9" "dev" #("origin/6ec88a9" 0 14 (ivy-index 0)) "origin/master" "develop" #("origin/" 0 7 (ivy-index 0)) "master" #("6ec88a9" 0 7 (ivy-index 0)) #("master" 0 6 (ivy-index 0)) #("origin/master" 0 13 (ivy-index 0)) "HEAD" "f15e9ae" #("1.0.0" 0 5 (ivy-index 0)) #("0.0.0" 0 5 (ivy-index 0))))
(setq yes-or-no-p-history '("yes"))
(setq ivy-history '("settings.org" #("sett" 0 4 (ivy-index 0)) #("org" 0 3 (ivy-index 0)) #("elf" 0 3 (ivy-index 1)) #("elfe" 0 4 (ivy-index 0)) "*Messages*" "*eww*" #("elfeed" 0 6 (ivy-index 0)) "*scratch*" "settings.org" "*eww*" "settings.org" "*eww*" "constraint-propagation.lisp" "util.lisp" #("infe" 0 4 (ivy-index 0)) "constraint-propagation.lisp" #("util" 0 4 (ivy-index 0)) #("pdf" 0 3 (ivy-index 1)) #("constraint-propagation.lisp" 0 27 (ivy-index 0)) "util.lisp" #("repl" 0 4 (ivy-index 0)) #("inf" 0 3 (ivy-index 0)) "digital-circuits-practice.lisp" "digital-circuits-test.lisp" "digital-circuits-practice.lisp" #("test" 0 4 (ivy-index 0)) "util.lisp" #("cli" 0 3 (ivy-index 0)) "digital-circuits-test.lisp" "digital-circuits-practice.lisp" "digital-circuits-test.lisp" "digital-circuits-practice.lisp" "digital-circuits-test.lisp" "digital-circuits-practice.lisp" "digital-circuits-test.lisp" "digital-circuits-practice.lisp" "util.lisp" "digital-circuits-practice.lisp" #("clisp" 0 5 (ivy-index 1)) #("sicp" 0 4 (ivy-index 0)) "settings.org" #("di" 0 2 (ivy-index 0)) #("digi" 0 4 (ivy-index 0)) #("tab" 0 3 (ivy-index 0)) "table.lisp" #("lisp" 0 4 (ivy-index 0)) "*Outline magit.pdf*" #("pack" 0 4 (ivy-index 0)) "*scratch*" #("set" 0 3 (ivy-index 0)) ".emacs.d" #("origin" 0 6 (ivy-index 0)) #("gray" 0 4 (ivy-index 17)) "table.lisp" #("tabl" 0 4 (ivy-index 0)) "local" #("white" 0 5 (ivy-index 12)) #("black" 0 5 (ivy-index 0)) #("red3" 0 4 (ivy-index 4)) "sroh" "settings.org" "magit: .emacs.d" "magit.pdf" #("ma" 0 2 (ivy-index 0)) "sicp.pdf" "*slime-repl clisp*" "sicp.pdf" "*slime-repl clisp*" "3" #("clis" 0 4 (ivy-index 0)) "3" "queue.lisp" "3" "queue.lisp" #("mu" 0 2 (ivy-index 0)) "mutable-list-structure.lisp" "3" "mutable-list-structure.lisp" "bin" "3" "mutable-list-structure" "monte-carlo.lisp" "2.lisp" "monte-carlo.lisp" #("2." 0 2 (ivy-index 0)) #("slime" 0 5 (ivy-index 0)) #("mon" 0 3 (ivy-index 0)) #("init" 0 4 (ivy-index 0)) "*Warnings*" "monte-carlo.lisp" "*Warnings*" #("ini" 0 3 (ivy-index 0)) #("3" 0 1 (ivy-index 0)) #("sly" 0 3 (ivy-index 0)) "2.lisp" "bank.lisp" #("2.lisp" 0 6 (ivy-index 0)) "withdraw.lisp" #("2" 0 1 (ivy-index 1))))
(setq counsel-M-x-history '(#("^elfeed" 0 7 (ivy-index 0)) #("^elfeed-update" 0 14 (ivy-index 0)) #("^elfeed-load-opml" 0 17 (ivy-index 0)) #("^elfeed-add-feed" 0 16 (ivy-index 0)) #("^elfe" 0 5 (ivy-index 0)) #("^eww" 0 4 (ivy-index 0)) #("^pack list pack" 0 15 (ivy-index 0)) #("^slime" 0 6 (ivy-index 0)) #("^electric-pa" 0 12 (ivy-index 2)) #("^slime-mode" 0 11 (ivy-index 0)) #("^pack " 0 6 (ivy-index 0)) #("^ branch rename" 0 15 (ivy-index 0)) #("^magit-push-other" 0 17 (ivy-index 0)) #("^magit-push" 0 11 (ivy-index 0)) #("^set-cur" 0 8 (ivy-index 0)) #("^set-for" 0 8 (ivy-index 0)) #("^set-" 0 5 (ivy-index 0)) #("^set-back" 0 9 (ivy-index 0)) #("^magit-stat" 0 11 (ivy-index 0)) #("^magit-dis" 0 10 (ivy-index 1)) #("^sly" 0 4 (ivy-index 0)) #("^ scroll up" 0 11 (ivy-index 7)) #("^insert" 0 7 (ivy-index 3)) #("^set-background-color" 0 21 (ivy-index 0)) #("^set" 0 4 (ivy-index 0)) #("^iedit-" 0 7 (ivy-index 25)) #("^pdf wid" 0 8 (ivy-index 0)) #("^pdf res" 0 8 (ivy-index 1)) #("^pdf fit" 0 8 (ivy-index 2)) #("^package-au" 0 11 (ivy-index 0)) #("^slime-setup" 0 12 (ivy-index 0)) #("^slime " 0 7 (ivy-index 0)) #("^pdf-" 0 5 (ivy-index 100)) #("^pack lis" 0 9 (ivy-index 0)) #("^pdf-view-midnight-minor-mode" 0 29 (ivy-index 0)) #("^pdf-view-mode" 0 14 (ivy-index 0)) #("^shell" 0 6 (ivy-index 0)) #("^pack list pac" 0 14 (ivy-index 0)) #("^package- list p" 0 16 (ivy-index 0)) #("^flys" 0 5 (ivy-index 3)) #("^calendar" 0 9 (ivy-index 0)) #("^pack list" 0 10 (ivy-index 0)) #("^hol" 0 4 (ivy-index 0)) #("lunar-phases" 0 12 (ivy-index 1)) #("^eva" 0 4 (ivy-index 0)) #("^eval" 0 5 (ivy-index 0)) #("^eval-bu" 0 8 (ivy-index 0)) #("^eval " 0 6 (ivy-index 0)) #("^eval-buf" 0 9 (ivy-index 0)) #("^eval-buff" 0 10 (ivy-index 0)) #("^upcase" 0 7 (ivy-index 0)) #("^eval-buffer" 0 12 (ivy-index 0)) #("^menu-bar-mode" 0 14 (ivy-index 0)) #("^tool bar" 0 9 (ivy-index 0)) #("^org-sw" 0 7 (ivy-index 0)) #("^org-cap" 0 8 (ivy-index 0)) #("^org-refile" 0 11 (ivy-index 0)) #("^org-ca" 0 7 (ivy-index 0)) #("^eval b" 0 7 (ivy-index 0)) #("^org-store-li" 0 13 (ivy-index 0)) #("^org-insert" 0 11 (ivy-index 4)) #("^org-insert-heading" 0 19 (ivy-index 0)) #("^pack list " 0 11 (ivy-index 0)) #("^pac list pac" 0 13 (ivy-index 0)) #("^paredit-mode" 0 13 (ivy-index 0)) #("^paredit-mo" 0 11 (ivy-index 0)) #("^ibuffer" 0 8 (ivy-index 0)) #("^org-cycle" 0 10 (ivy-index 3)) #("^text-scale-increase" 0 20 (ivy-index 0)) #("^colo" 0 5 (ivy-index 1)) #("^recentf-open" 0 13 (ivy-index 0)) #("^magit-status" 0 13 (ivy-index 0)) #("^magit stat" 0 11 (ivy-index 0)) #("^magit" 0 6 (ivy-index 0)) #("^mag" 0 4 (ivy-index 0)) #("^magit-statu" 0 12 (ivy-index 0)) #("^hipp" 0 5 (ivy-index 0)) #("^counse" 0 7 (ivy-index 1))))
(setq swiper-history '(#(".emacs.d" 0 8 (ivy-index 1)) "elfeed" "elf" #("elf-" 0 4 (ivy-index 0)) #("elf" 0 3 (ivy-index 0)) "readme" #("installed" 0 9 (ivy-index 4)) #("elfeed" 0 6 (ivy-index 4)) "haf" "haf" #("ele" 0 3 (ivy-index 0)) #("slime" 0 5 (ivy-index 4)) #("pdf-" 0 4 (ivy-index 0)) #("pdf" 0 3 (ivy-index 0)) "pdftoo" #("pdf-to" 0 6 (ivy-index 0)) "pdf-too" #("org" 0 3 (ivy-index 4)) "slim" "save" "auto" #("magit" 0 5 (ivy-index 0)) #("black" 0 5 (ivy-index 0)) "clisp" #("usr" 0 3 (ivy-index 0)) #("clisp" 0 5 (ivy-index 0)) #("theme hack" 0 10 (ivy-index 0)) "pull" "rese" "s" "To" #("tools" 0 5 (ivy-index 0)) #("docu" 0 4 (ivy-index 0)) #("sly" 0 3 (ivy-index 0)) "error" "monte" "sbcl" "sbcl" #("sbcl" 0 4 (ivy-index 0)) #("^ " 0 2 (ivy-index 1)) #("ge" 0 2 (ivy-index 0)) "nil" "nil" #("defun flatmap" 0 13 (ivy-index 0)) #("defun accu" 0 10 (ivy-index 0)) "accud" "safe" "p" "ol" "t" #("par" 0 3 (ivy-index 1)) #("defun enu" 0 9 (ivy-index 0)) #("defun enum" 0 10 (ivy-index 1)) #("enum" 0 4 (ivy-index 7)) #("permu" 0 5 (ivy-index 1)) #("sicp-fibo" 0 9 (ivy-index 0)) "thee" "color" #("color theme" 0 11 (ivy-index 10)) #("heroku" 0 6 (ivy-index 1)) #("hero" 0 4 (ivy-index 1)) "midpo" #("midpo" 0 5 (ivy-index 0)) #("sear" 0 4 (ivy-index 2)) "n" #("sicp" 0 4 (ivy-index 3)) #("down" 0 4 (ivy-index 2)) #("downl" 0 5 (ivy-index 2)) #("do" 0 2 (ivy-index 2)) "iter" "tentqq" #("hiker" 0 5 (ivy-index 2)) "backpacker" #("backpacker" 0 10 (ivy-index 35)) "elfee" "eww" #("rss" 0 3 (ivy-index 2)) "eww" "eeww" "back" "mailq" #("feed" 0 4 (ivy-index 0)) "h" "web" #("defvar" 0 6 (ivy-index 0)) #("map" 0 3 (ivy-index 0)) "mape" "sli" "lisp" "lisp-" #("pg" 0 2 (ivy-index 0)) #("capture" 0 7 (ivy-index 1)) "next" "line" "pdf-too" #("pdf-tools" 0 9 (ivy-index 0)) "company" #("lisp" 0 4 (ivy-index 0)) #("pdf-too" 0 7 (ivy-index 0)) "brew"))
(setq file-name-history '(#("/Users/sroh/" 0 12 (ivy-index 0)) #("/Users/sroh/.emacs.d/" 0 21 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/util.lisp" 0 31 (ivy-index 18)) #("/Users/sroh/pg/SICP/3/constraint-propagation.lisp" 0 49 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/digital-circuits-test.lisp" 0 48 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/digital-circuits-practice.lisp" 0 52 (ivy-index 0)) #("/Users/sroh/Documents/TOOLS/124388-Slime-Manual.pdf" 0 51 (ivy-index 3)) #("/Users/sroh/org" 0 15 (ivy-index 0)) #("/Users/" 0 7 (ivy-index 1)) #("/Users/sroh/pg/SICP/3/table.lisp" 0 32 (ivy-index 6)) "~/.emacs.d/settings.org" #("/Users/sroh/.emacs.d/.git/" 0 26 (ivy-index 2)) #("/Users/sroh/Documents/" 0 22 (ivy-index 0)) #("/Users/sroh/Documents/TOOLS/" 0 28 (ivy-index 0)) #("/Users/sroh/Downloads/" 0 22 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/digital-circuits.lisp" 0 43 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/" 0 22 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/queue.lisp" 0 32 (ivy-index 5)) #("/Users/sroh/pg/SICP/3/mutable-list-structure.lisp" 0 49 (ivy-index 7)) #("/Users/sroh/pg/SICP/3/#monte-carlo.lisp#" 0 40 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/mutable-list-structure" 0 44 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/monte-carlo.lisp" 0 38 (ivy-index 3)) #("/Users/sroh/Documents/GENETIC/vtt-convert/" 0 42 (ivy-index 0)) #("/Users/sroh/Documents/GENETIC/vtt-convert" 0 41 (ivy-index 0)) #("/Users/sroh/Documents/GENETIC/" 0 30 (ivy-index 0)) #("/Users/sroh/pg/SICP/2/" 0 22 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/bank.lisp" 0 31 (ivy-index 0)) #("/Users/sroh/pg/SICP/3/withdraw.lisp" 0 35 (ivy-index 0)) #("/Users/sroh/pg/SICP/3" 0 21 (ivy-index 0)) #("/Users/sroh/pg/SICP/2/polynomial.lisp" 0 37 (ivy-index 0)) #("/Users/sroh/pg/SICP/2/2.lisp" 0 28 (ivy-index 0)) #("/Users/sroh/pg/SICP/2/rectangular.lisp" 0 38 (ivy-index 0)) #("/Users/sroh/pg/SICP/2/scheme-number.lisp" 0 40 (ivy-index 7)) #("/Users/sroh/pg/SICP/2/complex.lisp" 0 34 (ivy-index 0)) #("/Users/sroh/pg/SICP/2/rational.lisp" 0 35 (ivy-index 0)) #("/Users/sroh/pg/SICP/" 0 20 (ivy-index 0)) #("/Users/sroh/pg/SICP/2/polar.lisp" 0 32 (ivy-index 0)) #("/Users/sroh/pg/SICP/2/rectangular.lsp" 0 37 (ivy-index 0)) #("/Users/sroh/pg/sicp/2" 0 21 (ivy-index 0)) #("/Users/sroh/pg/" 0 15 (ivy-index 0)) #("/Users/sroh/pg/SICP/222/" 0 24 (ivy-index 0)) #("/Users/sroh/pg/SICP/222" 0 23 (ivy-index 0)) #("/Users/sroh/pg/SICP/22/" 0 23 (ivy-index 0)) #("/Users/sroh/pg/SICP/22" 0 22 (ivy-index 0)) #("/Users/sroh/pg/SICP/.#2.lsp" 0 27 (ivy-index 0)) #("/Users/sroh/pg/SICP/2.lsp" 0 25 (ivy-index 0)) #("/Users/sroh/.emacs.d/init.el" 0 28 (ivy-index 0)) #("/Users/sroh/.emacs.d/settings.el" 0 32 (ivy-index 0)) #("/Users/sroh/.emacs.d/elpa/" 0 26 (ivy-index 0)) #("/Users/sroh/pg/SICP/1.lsp" 0 25 (ivy-index 3)) #("/Users/sroh/pg/SICP" 0 19 (ivy-index 0)) #("/Users/sroh/pg/Paradigms-of-AI-Programming/" 0 43 (ivy-index 0)) #("/Users/sroh/gtd/org/" 0 20 (ivy-index 0)) #("/Users/sroh/gtd/org/someday.org" 0 31 (ivy-index 0)) #("/Users/sroh/pg/Paradigms-of-AI-Programming/2.lsp" 0 48 (ivy-index 3)) #("/Users/sroh/pg/Paradigms-of-AI-Programming" 0 42 (ivy-index 0)) #("/Users/sroh/pg" 0 14 (ivy-index 0)) #("/Users/sroh/Documents/LISP/Paradigms of AI Programming.pdf" 0 58 (ivy-index 0)) #("/Users/sroh/Documents/LISP/ccl.pdf" 0 34 (ivy-index 10)) #("/Users/sroh/Documents/LISP/" 0 27 (ivy-index 0)) #("/usr/local/bin/" 0 15 (ivy-index 0)) #("/Users/sroh/gtd/" 0 16 (ivy-index 1)) #("/Users/sroh/gtd/org/inbox.org" 0 29 (ivy-index 0)) #("/Users/sroh/gtd/org/habit.org" 0 29 (ivy-index 9)) #("/Users/sroh/gtd/org/calendar.org_archive" 0 40 (ivy-index 5)) #("/Users/sroh/gtd/org/calendar.org" 0 32 (ivy-index 4)) #("/Users/sroh/gtd/org/gtd.org" 0 27 (ivy-index 2)) #("/Users/sroh/gtd/org/tickler.org" 0 31 (ivy-index 0)) #("/Users/sroh/gtd/org/.#someday.org" 0 33 (ivy-index 0)) #("/Users/sroh/gtd/org/#inbox.org#" 0 31 (ivy-index 0)) #("/Users/sroh/gtd/#inbox.org#" 0 27 (ivy-index 0)) #("/Users/sroh/gtd/sett" 0 20 (ivy-index 0)) #("/Users/sroh/gtd/tickler.org" 0 27 (ivy-index 6)) #("/Users/sroh/gtd/inbox.org" 0 25 (ivy-index 1)) #("/Users/sroh/.emacs.d/settings.org" 0 33 (ivy-index 0)) #("/Users/sroh/gtd/someday.org" 0 27 (ivy-index 0)) #("/Users/sroh/gtd/gtd.org" 0 23 (ivy-index 0)) #("/Users/sroh/gtd" 0 15 (ivy-index 0)) #("/Users/sroh/.emacs.d/test.org" 0 29 (ivy-index 0)) #("/Users/sroh/.emacs.d/a.el" 0 25 (ivy-index 0)) #("/Users/sroh/.emacs.d/a.c" 0 24 (ivy-index 0)) #("/Users/sroh/a.el" 0 16 (ivy-index 0)) #("/Users/sroh/a.cpp" 0 17 (ivy-index 0)) #("/Users/sroh/.emacs.d/elpa/color-theme-sanityinc-tomorrow-20181024.1728/" 0 71 (ivy-index 0)) #("/Users/sroh/ccl-init.lisp" 0 25 (ivy-index 0)) #("/Users/sroh/.emacs.d/#settings.org#" 0 35 (ivy-index 0)) "/Users/sroh/.emacs.d/auto-save-list/.saves-9321-SR5HMBA.local~"))
(setq ido-buffer-history '(".elfeed" "index" "elfeed-goodies-readme.txt" "elfeed-org-readme.txt" "elfeed-protocol-readme.txt" "elfeed-web-readme.txt" "elf-mode-readme.txt" "elfeed-readme.txt" "*inferior-lisp*" "*slime-repl clisp*" "*inferior-lisp*" "*slime-repl clisp*" "*inferior-lisp*" "clisp" "*slime-repl clisp*" "*slime-compilation*" "digital-circuits-test.lisp" "magit-diff: .emacs.d" "settings.org" "*inferior-lisp*" "*slime-repl clisp*" "sicp.pdf" "pdf-tools-autoloads.el" "sicp.pdf" "magit.pdf" "pdf-tools-autoloads.el" "magit.pdf" ".saves-14728-SR5HMBA.local~" "#settings.org#" "magit: .emacs.d" "org" "settings.org" "/" "047989ab490d9440fc823b92f3c9158f197a55" "COMMIT_EDITMSG" ".emacs.d" "sroh" "elpa" "settings.el" "*eww*" "util.lisp" "#util.lisp#" "*inferior-lisp*" "*slime-repl clisp*" "init.el" "subtitles-en.vtt" "subtitles-en-2.vtt" "4_002e1.xhtml" "*sly-inferior-lisp for clisp*" "withdraw.lisp" "scheme-number.lisp" "rectangular.lisp" "polar.lisp" "scheme-number.lisp" "*sly-inferior-lisp for clisp*" "*Completions*" "*sly-mrepl for clisp*" "1.lsp" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-compilation*" "*sly-events for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-compilation*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*About GNU Emacs*" "settings.el" "heroku-theme-pkg.el" "heroku-theme.el" "heroku-theme-readme.txt" "*sly-inferior-lisp for clisp*" "*sly-compilation*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*" "*sly-mrepl for clisp*" "*sly-inferior-lisp for clisp*"))
(setq ido-file-history '("util.lisp" "digital-circuits-practice.lisp" "digital-circuits-test.lisp" "digital-circuits-practice.lisp" "settings.org" "init.el" "settings.org" "init.el" ".saves-9321-SR5HMBA.local~" nil "init.el" "settings.org" "init.el"))
(setq query-replace-history '("1" "ad"))
(setq minibuffer-history '("lisp" "emacs" "430" "420" "400" "test 0.0.2" "0.0.2" "380" "390" "370" "340" "300" "200" "clisp" "defun" "100" "2018" "만능 휴대용화로" "버닝칸" "야마토미치(산과길)" "bplgear(고싸머기어, 마운틴로버)" "베러위켄드" "헬리녹스" "제로그램" "시에라아웃도어" "알데바란" "어반포레스트" "캠핑팩토리" "오캠몰" "캠핑온" "7942" "오케이몰" "가야미" "set-fontset-font" "dd" "git@github.com:sr5h/emacs.git" "origin" "git@github.com:sr5h/emacs.git" "origin" "git@github.com:sr5h/emacs.git" "origin" "https://github.com/sr5h/emacs.git" "origin" "count-matches" "replace-regexp" "global-set-key" "replace-string"))
(setq extended-command-history '("eval-buffer" "swiper" "eval-buffer" "org-cycle-level" "package-list-packages" "ido-describe-bindings" "eval-buffer" "package-list-packages" "eval-buffer"))
(setq tablist-named-filter 'nil)
