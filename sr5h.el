;;;; sr5h.el

(defun sr5h-make-frame (&optional parameters)
  (interactive)
  (let* ((old-frame-pos (frame-position (selected-frame)))
	 (left (car old-frame-pos))
	 (alist (cons 'left (+ left 390))))
    (if parameters
	(make-frame parameters)
      (make-frame (list alist)))))

(defun sr5h-select-slime-repl ()
  (interactive)
  (select-frame-by-name "Emacs: *slime-repl sbcl*"))

;; TODO: how to get frame?
(let ((frame nil))
  (defun sr5h-slime ()
    (interactive)
    (setf frame (sr5h-make-frame '((background-color . "black")
				   (foreground-color . "white")
				   (left . 800)	       	; value of left key is arbitrary.
				   (height . 30)
				   (width . 95)
				   (alpha 85 . 85)
				   )))
    (slime)
    (make-thread (lambda ()
  		   (while (not (get-buffer "*slime-repl sbcl*"))
  		     ;; (print "get-buffer : *slime-repl sbcl* ??")
  		     (thread-yield))
		   
		   (delete-other-windows)
  		   (delete-window (get-buffer-window (get-buffer "*slime-repl sbcl*")))
  		   ;; (print "finished get-buffer : *slime-repl sbcl*")
		   )
  		 ;; "test"
		 )
    ;; (make-thread (lambda ()
    ;; 		 (cl-labels ((iter (threads)
    ;; 			    (cond ((null threads) nil)
    ;; 				  ((equal (thread-name (car threads)) "test")
    ;; 				   (car threads))
    ;; 				  (t (iter (cdr threads))))))
    ;; 		   (let ((test-thread (iter (all-threads))))
    ;; 		     (while (thread-alive-p test-thread)
    ;; 		       (print "test thread finished ??")
    ;; 		       (thread-yield))
    
    ;; 		     ))
    ;; 		 (print "finished test thread job")
    ;; 		 (delete-other-windows)
    ;; 		 ))
    ;; (set-window-buffer (frame-selected-window) "*slime-repl sbcl*")
    ;; (delete-other-windows)
    )

  (defun sr5h-kill-slime ()
    (interactive)
    (let ((repl-buf (get-buffer "*slime-repl sbcl*"))
	  (inf-buf (get-buffer "*inferior-lisp*"))
	  (current-frame (selected-frame)))
      (if repl-buf (kill-buffer repl-buf))
      (if inf-buf (kill-buffer inf-buf))
      (if (and frame (not (equal frame current-frame)))
	  (delete-frame frame))
      (select-frame current-frame))))
